x <- 2
x
y <- c(3,5)
y
a  <- c(x,y)
a[1]
a[3]
a[4]
ls
asdasf
ls()
c
demo
demo()
demo(graphics)
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
#just a comment
z <- c(8,13,21)
2*z
#just a comment
z <- c(8,13,21)
2*z
fib <- c(1,1,2,3,5,z)
2*fib+1
fib*fib
log(fib)
fib
s <- 2*(1:3)
s
fib[3]
fib
fib[4:7]
fib[s]
fib[c(3,5)]
fib[-c(3,5)]
fib
fib[c(3,5)]
x <- c(1,-2,5,-4,0,3)
x
x > 0
x[x > 0]
a = x>0
x[a]
x
x[-a]
a
-a
--a
a*1
a+1
a <- seq(1,6,by=1)
a
a[c(1,3,5)]
a[-c(1,3,5)]
even(1)
iseven(1)
mod(3,1)
mode(3,1)
b = a>=3
b
a[b]
c = b[c(3:6)]
c
a
a[c]
c[2] = FALSE
c
d = 1
a
b
c
a[c]
4
y <- 5:8
mat1 <- cbind(x,y)
mat2 <-
x <- 1:4
x <- 1:4
y <- 5:8
x
y
mat1
rm
rm(all)
?rm
rm(list = ls())
x <- 1:4
y <- 5:8
mat1 <- cbind(x,y)
mat1
mat2 <- rbind(x,y,x+y)
mat2
mat[3,2]
mat2[3,2]
mat2[2,]
mat2[,1]
c0 <- read.table("ctest3.data")
help()
help(summary)
x  <- 1:5
x
class(x)
size(x)
length(x)
as.character(x)
m  <- matrix(nrow=2,ncol=2)
m
dim(m)
attributes(m)
m  <- matrix(1:6, nrow=2, ncol=2)
m
m  <- matrix(1:6, nrow=2, ncol=3)
m <- 1:10
m
dim(m) <- c(2,5)
m
cbind(x,y)
x  <- 1:3
y  <- 10:12
cbind(x,y)
rbind(x,y)
x <- list(1, "a", TRUE, 1+4i)
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
table(x) # frequency table
unclass(x)
levels = c("yes","no"))  # setting factor order (default: alphabetical)
x <- factor(c("yes", "yes", "no", "yes", "no"),
levels = c("yes","no"))  # setting factor order (default: alphabetical)
x
is.na()
x  <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
x <- 1:3
x
names(x) <- c("foo", "bar", "norf")
x
x  <- list(a=1, b=2, c=3)
x
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m)  <- list(c("r1","r2"),c("c1","c2"))
m
x <- c("a", "b","c", "d","a")
x[1]
x[1:4]
x[x > a]
x[x > "a"]
u  <- x > "a"
u
x[u]
m <- matrix(1:6, 2, 3)
m
x[1,2]
m[1,2]
m[1,]
l <- list(foo=1:4, bar=0.6)
x
l
l[1]
l[[1]]
l$foo
l[["bar"]]
l["bar"]
class(l[1])    # returns class list
class(l[[1]])  # returns just numbers
l
l[[1]]
class(l[["bar"]])
class(l$foo)
class(l[["bar"]])
class(l["bar"])
class(1)
class(1:3)
class(0.5:1:3.5)
0.5:1:3.5
l <- list(foo=1:4, bar=0.6, baz="hello")
l[c(1,3)]
x <- c(1, 2, NA, 4, NA, 5)
bad
bad <- is.na(x)
bad
x[!bad]
x <- c(1,2,NA,4,NA,5)
y <- c("a","b",NA,"d",NA,"f")
good <- complete.cases(x,y)
good
y <- c("a","b",NA,"d",NA,NA)
good <- complete.cases(x,y)
good
help read.table
help(read.table)
clear
clc
clear
install.packages("swirl")
help(library)
help(read.table)
?library
library("swirl")
good
rm(list=ls())
swirl()
help.start()
5 + 4
5 + 7
nxt()
play()
afda
4*4
nxt()
info()
skip()
main()
main()
info()
bye()
install_from_swirl
install_from_swirl()
install_from_swirl("Data Analysis")
swirl()
bye()
getwd()
setws("Desktop//Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/")
setwd("Desktop//Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/")
dir
dir()
edit("README.md")
load("~/Desktop/Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/README.md")
load("~/Desktop/Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/cachematrix.R")
?<--
?"<--"
??"<--"
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
str(makeVector)
class(makeVector)
a <- makevector()
a <- makeVector()
a
x <- 1:100
vec <- makeVector(x)
vec$get
vec$get()
vec$set()
vec$getmean()
vec$setmean(mean(x))
vec$getmean()
source('~/Desktop/Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/cachemean.R')
makeVector()
vec <- makeVector
vec$get()
vec <- makeVector(1:20)
vec$get
vec$get()
cachemean(vec)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
message("assigning data, calculating mean, setting mean, returning mean")
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(vec)
vec$set(5:10)
vec$getmean()
chchemean(vec)
cachemean(vec)
mat <- matrix(c(2,5,1,3),nrow=2,ncol=2)
mat
mat <- matrix(c(2,1,5,3),nrow=2,ncol=2)
mat
solve(mat)
mat2 <- mat
mat
mat2[2,2]
mat2[2,2] <- 4
solve(mat2)
source('~/.active-rstudio-document', echo=TRUE)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
mat
mcm <- makeCacheMatrix(mat)
mcm$get
mcm$get()
mcm$getinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(mat)
inv
}
cacheSolve()
cacheSolve(mat)
cacheSolve(mcm)
source('~/.active-rstudio-document', echo=TRUE)
cacheSolve(mcm)
mcm$set(mat2)
mcm$get
mcm$get()
chacheSolve(mcm)
cacheSolve(mcm)
cacheSolve(mcm)
source('~/Desktop/Coursera R Programming/Quizzes and assignments/Assignment 2/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
message("calculating inverse")
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(mat)
inv
}
specialMatrix <- makeCacheMatrix
specialMatrix$set(matrix(c(2,1,5,3),nrow=2,ncol=2))
matrix(c(2,1,5,3),nrow=2,ncol=2)
mat <- matrix(c(2,1,5,3),nrow=2,ncol=2) # define a matrix
specialMatrix$set(mat)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
message("calculating inverse")
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(mat)
inv
}
specialMatrix <- makeCacheMatrix
specialMatrix
specialMatrix <- makeCacheMatrix()
specialMatrix
mat <- matrix(c(2,1,5,3),nrow=2,ncol=2) # define a matrix
specialMatrix$set(mat)
specialMatrix$get
specialMatrix$get()
cacheSolve(specialMatrix)
cacheSolve(specialMatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve takes a special "matrix" as an input and returns its inverse. It
## calls makeCacheMatrix$getinv() to look for a cached inverse. If no cached
## inverse is available, it calculates the inverse and also caches the result of
## the calculation
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
message("calculating inverse")
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(mat)
inv
}
specialMatrix <- makeCacheMatrix()
mat <- matrix(c(2,1,5,3),nrow=2,ncol=2)
specialMatrix$set(mat)
View(mat)
